
// 1. Allow Order Again for Processing Status
  
add_filter( 'woocommerce_valid_order_statuses_for_order_again', 'woocommerce_order_again_statuses' );
  
function woocommerce_order_again_statuses( $statuses ) {
    $statuses[] = 'processing';
    return $statuses;
}

// 2. Add Order Actions @ My Account
  
add_filter( 'woocommerce_my_account_my_orders_actions', 'woocommerce_add_edit_order_my_account_orders_actions', 50, 2 );
  
function woocommerce_add_edit_order_my_account_orders_actions( $actions, $order ) {
    if ( $order->has_status( 'processing' ) ) {
        $actions['edit-order'] = array(
            'url'  => wp_nonce_url( add_query_arg( array( 'order_again' => $order->get_id(), 'edit_order' => $order->get_id() ) ), 'woocommerce-order_again' ),
            'name' => __( 'Edit Order', 'woocommerce' )
        );
    }
    return $actions;
}

// 3. Detect Edit Order Action and Store in Session
  
add_action( 'woocommerce_cart_loaded_from_session', 'woocommerce_detect_edit_order' );
             
function woocommerce_detect_edit_order( $cart ) {
    if ( isset( $_GET['edit_order'] ) ) WC()->session->set( 'edit_order', absint( $_GET['edit_order'] ) );
}

// 4. Display Cart Notice re: Edited Order
  
add_action( 'woocommerce_before_cart', 'woocommerce_show_me_session' );
  
function woocommerce_show_me_session() {
    if ( ! is_cart() ) return;
    $edited = WC()->session->get('edit_order');
    if ( ! empty( $edited ) ) {
        $order = new WC_Order( $edited );
        $credit = $order->get_total();
        wc_print_notice( 'A credit of ' . wc_price($credit) . ' has been applied to this new order. Feel free to add products to it or change other details such as delivery date.', 'notice' );
    }
}

// 5. Calculate New Total if Edited Order
   
add_action( 'woocommerce_cart_calculate_fees', 'woocommerce_use_edit_order_total', 20, 1 );
   
function woocommerce_use_edit_order_total( $cart ) {
    
  if ( is_admin() && ! defined( 'DOING_AJAX' ) ) return;
     
  $edited = WC()->session->get('edit_order');
  if ( ! empty( $edited ) ) {
      $order = new WC_Order( $edited );
      $credit = -1 * $order->get_total();
      $cart->add_fee( 'Credit', $credit );
  }
    
}

// 6. Save Order Action if New Order is Placed
  
add_action( 'woocommerce_checkout_update_order_meta', 'woocommerce_save_edit_order' );
   
function woocommerce_save_edit_order( $order_id ) {
    $edited = WC()->session->get( 'edit_order' );
    if ( ! empty( $edited ) ) {
         $new_order      = new WC_Order( $order_id );
         $old_order      = new WC_Order( $edited );
         $new_order_edit = $new_order->get_edit_order_url();
         $old_order_edit = $old_order->get_edit_order_url();
         // update this new order.
         update_post_meta( $order_id, '_edit_order', $edited );
         $new_order->add_order_note( sprintf( __( 'Order placed after editing. Old order number: %s', 'crispybacon-woo-modify-order' ), '<a href="' . $old_order_edit . '">' . $edited . '</a>' ) );
         // cancel previous order.
         $old_order->update_status( 'cancelled', sprintf( __( 'Order cancelled after editing. New order number: %s' ), 'crispybacon-woo-modify-order' ), ' <a href="' . $new_order_edit . '">' . $order_id . '</a> - ' );
         WC()->session->set( 'edit_order', '' );
    }
}
